{"version":3,"sources":["Calc.js","App.js","serviceWorker.js","index.js"],"names":["Calc","state","display","storeNumber1","symbol","storeNumber2","symbol2","hideDisplay","hideResult","clearFunc","setState","reset","symbolFunc","store1Func","console","log","value","join","displayFunc","number","equalsFunc","store2Func","this","num1","parseInt","string2","substr","string3","result","className","id","type","href","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a25392b1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass Calc extends React.Component {\n    state =  {\n        display: [],\n        storeNumber1: \"\",\n        symbol: \"\",\n        storeNumber2: \"\",\n        symbol2: \"\",\n        hideDisplay: false,\n        hideResult: true\n    }\n\nclearFunc = () => {\n    this.setState ({\n        display: \"\",\n    })\n}\n\nreset = () => {\n    this.setState ({\n        display: [],\n        storeNumber1: \"\",\n        symbol: \"\",\n        storeNumber2: \"\",\n        symbol2: \"\",\n        hideDisplay: false,\n        hideResult: true\n    })\n}\n\n//store the symbol from the display\nsymbolFunc = (symbol) => {\n    this.store1Func(this.state.display)\n    this.setState ({\n        display: symbol,\n        symbol:  symbol\n    })\n    console.log(symbol)\n}\n\n//store the current value from the display\nstore1Func = (value) => {\n    this.setState({\n        storeNumber1: value.join(\"\")\n        //storeNumber1: value\n    })\n    console.log(value)\n}\n\n//if a number button is pressed it's added to display \ndisplayFunc = (number) => {\n    this.setState ({\n        //storeNumber1: \"\"? {storeNumber1: number} : {storeNumber2: number}  \n        display: [...this.state.display, number],\n        //display: number\n    })\n    console.log(number)\n}\n\n//if equals is pressed stores array 2, clears display, runs the calc functions then shows result\nequalsFunc = () => {\n    this.store2Func(this.state.display)\n    this.clearFunc()\n    this.setState ({\n        hideDisplay: true,\n        hideResult: false,\n        // storeNumber1: #resultText.value\n    })    \n}\n\nstore2Func = (value) => {\n    \n    this.setState({\n        storeNumber2: value.join(\"\")\n        //storeNumber2: value\n        \n    })\n    console.log(this.state.storeNumber2);\n}\n\n\n  render(){\n    console.log(this.state)\n    let num1 = parseInt(this.state.storeNumber1);\n\n    let string1 = this.state.storeNumber2;\n    let string2 = string1.substr(1);\n    let string3 = parseInt(string2)\n    \n    let result = 0;\n    // console.log(\"num 1 is \" + num1);\n    // console.log(\"num 2 is \" + string3);\n    // console.log(typeof(string3));\n    // console.log(typeof(num2));\n\n    switch(this.state.symbol){\n        case '+':\n            result =  (num1 + string3);\n            break;\n        case '-':\n             result =  (num1 - string3);\n            break;\n        case '/':\n            result = (num1 / string3);\n            break;\n        case '*':\n            result = (num1 * string3);\n            break;\n        default:\n            console.log(\"it's all gone wrong\");\n    }\n\n    console.log(result);\n\n  return (\n    <div className=\"App\">\n        <div id=\"output\">\n          <h1 className={!this.state.hideDisplay ? \"display\" : \"display hide\"} type=\"text\" href=\"#\" >{this.state.display}</h1>\n          <h1 className={this.state.hideResult ? \"display hide\" : \"display\"} id=\"resultText\" type=\"text\" href=\"#\" >{result !== 0 ? result : \"\" }</h1>\n          \n          {/* {this.state.storeNumber1}{this.state.symbol}{this.state.storeNumber2}{this.state.symbol2}{this.state.result} */}\n        </div>\n        <div id=\"row1\">\n        <a onClick={this.reset} className=\"resetBtn\" href=\"#\">reset</a> \n          <a onClick={this.clearFunc} className=\"clearBtn\" href=\"#\">clear</a>\n          <a  onClick={() => this.symbolFunc(\"/\")} className=\"divideBtn\" href=\"#\">/</a>\n        </div>\n        <div id=\"row2\">\n          <a onClick={() => this.displayFunc(7)} className=\"btn7\" href=\"#\">7</a>\n          <a  onClick={() => this.displayFunc(8)} className=\"btn8\" href=\"#\">8</a>\n          <a  onClick={() => this.displayFunc(9)}className=\"btn9\" href=\"#\">9</a>\n          <a  onClick={() => this.symbolFunc(\"-\")} className=\"minusBtn\" href=\"#\">-</a>\n        </div>\n        <div id=\"row3\">\n          <a  onClick={() => this.displayFunc(4)}className=\"btn4\" href=\"#\">4</a>\n          <a  onClick={() => this.displayFunc(5)} className=\"btn5\" href=\"#\">5</a>\n          <a  onClick={() => this.displayFunc(6)}className=\"btn6\" href=\"#\">6</a>\n          <a  onClick={() => this.symbolFunc(\"+\")}className=\"plusBtn\" href=\"#\">+</a>\n        </div>\n        <div id=\"row4\">\n          <a  onClick={() => this.displayFunc(1)}className=\"btn1\" href=\"#\">1</a>\n          <a  onClick={() => this.displayFunc(2)}className=\"btn2\" href=\"#\">2</a>\n          <a  onClick={() => this.displayFunc(3)}className=\"btn3\" href=\"#\">3</a>\n          <a  onClick={() => this.symbolFunc(\"*\")}className=\"plusBtn\" href=\"#\">*</a>\n          \n        </div>\n        <div id=\"row5\">\n          <a  onClick={() => this.displayFunc(0)}className=\"btn0\" href=\"#\">0</a>\n          <a  onClick={() => this.equalsFunc(\"=\")} className=\"equalsBtn\" href=\"#\">=</a>\n        \n        </div>\n\n    </div>\n  );\n }\n}\n\nexport default Calc;\n","import React from 'react';\n// import Counter from './Counter';\nimport Calc from './Calc';\n\nclass App extends React.Component {\n \n\n\n  render(){\n  return (\n    <div className=\"App\">\n     {/* <Counter /> */}\n     <Calc />\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}